"use strict";(self.webpackChunk_1_inch_docs=self.webpackChunk_1_inch_docs||[]).push([[8974],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return d}});var r=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=r.createContext({}),c=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},u=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},f=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),f=c(n),d=i,m=f["".concat(l,".").concat(d)]||f[d]||p[d]||o;return n?r.createElement(m,a(a({ref:t},u),{},{components:n})):r.createElement(m,a({ref:t},u))}));function d(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,a=new Array(o);a[0]=f;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:i,a[1]=s;for(var c=2;c<o;c++)a[c]=n[c];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}f.displayName="MDXCreateElement"},3145:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return s},contentTitle:function(){return l},metadata:function(){return c},toc:function(){return u},default:function(){return f}});var r=n(87462),i=n(63366),o=(n(67294),n(3905)),a=["components"],s={sidebar_position:1},l="Introduction",c={unversionedId:"fusion-swap/introduction",id:"fusion-swap/introduction",isDocsHomePage:!1,title:"Introduction",description:"Overview",source:"@site/docs/fusion-swap/introduction.mdx",sourceDirName:"fusion-swap",slug:"/fusion-swap/introduction",permalink:"/docs/fusion-swap/introduction",editUrl:"https://github.com/1inch/1inch-docs/edit/master/docs/fusion-swap/introduction.mdx",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Switching between networks",permalink:"/docs/rabbithole/switching-between-networks"},next:{title:"How to become a resolver",permalink:"/docs/fusion-swap/how-to-become-resolver"}},u=[{value:"Overview",id:"overview",children:[]},{value:"Dutch auction filling rate",id:"dutch-auction-filling-rate",children:[]}],p={toc:u};function f(e){var t=e.components,n=(0,i.Z)(e,a);return(0,o.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"introduction"},"Introduction"),(0,o.kt)("h2",{id:"overview"},"Overview"),(0,o.kt)("p",null,"1inch Fusion Mode offer users a way to execute swaps without gas spend and risks of being front-run. Fusion Mode looks like a swap for a user but technically it is a limit order with a variable exchange rate filled by a third-party called Resolver. Starting from the moment order is placed, the exchange rate is decreasing from desired rate to minimal return amount (Dutch auction) until it becomes profitable for Resolvers to fill the order. Multiple resolvers compete for the order to ensure it is filled before the rate falls to minimal return amount."),(0,o.kt)("p",null,"Below are the examples of opportunities to gain profit for resolvers:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Dutch auction decreases order rate constantly;"),(0,o.kt)("li",{parentName:"ul"},"Gas economy when filling matching orders;"),(0,o.kt)("li",{parentName:"ul"},"Gas economy due to batch filling;")),(0,o.kt)("h2",{id:"dutch-auction-filling-rate"},"Dutch auction filling rate"),(0,o.kt)("p",null,"The order filling rate is a piecewise linear function that depends on multiple parameters, such as swap volume, gas costs, and the chosen preset (e.g., fast, fair, auction). It is calculated separately for each order and typically contains two breaking points that divide it into three intervals for fast preset, and three breaking point for fair and auction presets. The example logic for fast preset. the rate is decreased by"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"1st interval: estimated gas costs (first block);"),(0,o.kt)("li",{parentName:"ul"},"2nd interval: 1/6 of estimated gas costs each block (2/3 of the auction time);"),(0,o.kt)("li",{parentName:"ul"},"3rd interval: linearly to the min return value (the rest of auction time);")),(0,o.kt)("p",null,"Depending on the market state, swap volumes, and order expiration time, there may be fewer than two breaking points (e.g., swap 30 dollars at a time of high gas costs).\nThe logic and algorithms used to build the curve aim to maximize return for the user while still maintaining order fillability, and they are constantly improving.\nBelow are some real-life examples"),(0,o.kt)("img",{src:"/img/fusion/auction-1.png",alt:"auction1-image"}),(0,o.kt)("img",{src:"/img/fusion/auction-2.png",alt:"auction1-image"}),(0,o.kt)("img",{src:"/img/fusion/auction-3.png",alt:"auction1-image"}))}f.isMDXComponent=!0}}]);